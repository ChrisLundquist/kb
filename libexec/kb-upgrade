#!/usr/bin/env bash
# Usage: kb upgrade <plugin>[ <plugin> ...]
# Summary: Upgrades a plugin
# Help: Each <plugin> token can be of the form:
#
#   * <name>
#   * <name>@<tag_version>
#   * <name>:<tarball_url>
#
set -e
[ -n "$KB_DEBUG" ] && set -x

banner()  { echo "-----> $*" ; }
info()    { echo "       $*" ; }
warn()    { echo ">>>>>> $*" >&2 ; }

upgrade_to_release() {
  local plugin="$1"
  local current="$(kb-plugin-version $plugin --bare)"
  local tag="$(kb-ruby -S kb-github-tags jamie-ci kb-$plugin | grep '^v[0-9]' | tail -n 1 | sed 's/^v//')"
  [ -z "$tag" ] && tag="master"

  if [ "$tag" == "master" ] || [ $(kb-version-compare $current $tag) -lt 0 ] ; then
    banner "Upgrading $plugin to version $tag"
    rm -rf "$(kb-pluginpath $plugin)"
    kb-install "$plugin"
  else
    info "Skipping $plugin upgrade (current version: $current)"
  fi
}

upgrade_to_specified() {
  local plugin="$1"
  local token="$2"

  info "Upgrading $plugin to version $token"
  rm -rf "$(kb-pluginpath $plugin)"
  kb-install "$token"
}

upgrade() {
  local token="$1"

  case "$token" in
    *:*)
      local plugin="$(echo $token | awk -F':' '{ print $1 }')"
      local flavor="url"
      ;;
    *@*)
      local plugin="$(echo $token | awk -F'@' '{ print $1 }')"
      local flavor="tag"
      ;;
    *)
      local plugin="$token"
      local flavor="bare"
      ;;
  esac

  local plugin_path="$(kb-pluginpath $plugin)"

  if [ ! -d "$plugin_path" ] ; then
    info "$plugin plugin is not installed"
    return 1
  elif [ "$flavor" == "bare" ] ; then
    upgrade_to_release $plugin
  else
    upgrade_to_specified $plugin $token
  fi
}

ecode=0
while [ -n "$1" ] ; do
  if ! upgrade "$1" ; then
    warn "Plugin $1 upgrade failed"
    ecode=1
  fi
  shift
done

exit $ecode
